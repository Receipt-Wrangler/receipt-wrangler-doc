"use strict";(self.webpackChunkreceipt_wrangler_doc=self.webpackChunkreceipt_wrangler_doc||[]).push([[7839],{74587:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"configuration-examples/postgresql","title":"postgresql","description":"Below are some examples for a postgresql based configuration.","source":"@site/versioned_docs/version-4.x/configuration-examples/postgresql.md","sourceDirName":"configuration-examples","slug":"/configuration-examples/postgresql","permalink":"/docs/4.x/configuration-examples/postgresql","draft":false,"unlisted":false,"tags":[],"version":"4.x","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mariadb","permalink":"/docs/4.x/configuration-examples/mariadb"},"next":{"title":"sqlite","permalink":"/docs/4.x/configuration-examples/sqlite"}}');var s=r(74848),t=r(28453);const a={},i="postgresql",l={},c=[{value:"Main config",id:"main-config",level:2},{value:"Docker compose microservices",id:"docker-compose-microservices",level:2},{value:"Docker compose monolithic",id:"docker-compose-monolithic",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"postgresql",children:"postgresql"})}),"\n",(0,s.jsx)(n.p,{children:"Below are some examples for a postgresql based configuration."}),"\n",(0,s.jsx)(n.h2,{id:"main-config",children:"Main config"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="config.prod.json"',children:'{\n  "secretKey": "secretKey",\n  "aiSettings": {\n    "type": "openAi",\n    "url": "urlToLocallyHostedLLM",\n    "key": "openAiKey",\n    "numWorkers": 1,\n    "ocrEngine": "tesseract"\n  },\n  "emailPollingInterval": 1800,\n  "emailSettings": [\n    {\n      "host": "emailHost",\n      "port": "emailPort",\n      "username": "emailAddress",\n      "password": "password/apiKey"\n    }\n  ],\n  "features": {\n    "enableLocalSignUp": true,\n    "aiPoweredReceipts": true\n  },\n  "database": {\n    "user": "wrangler",\n    "password": "changeMe",\n    "name": "wrangler",\n    "host": "db",\n    "port": 5432,\n    "engine": "postgresql"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"docker-compose-microservices",children:"Docker compose microservices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'version: "3.5"\nservices:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: wrangler\n      PGUSER: wrangler\n      POSTGRES_PASSWORD: change_me\n      POSTGRES_DB: wrangler\n    volumes:\n      - ./pgsql:/var/lib/pgsql\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  proxy:\n    image: noah231515/receipt-wrangler-proxy:latest\n    ports:\n      - 9082:80\n    depends_on:\n      - api\n      - frontend\n\n  api:\n    image: noah231515/receipt-wrangler-api:latest\n    restart: always\n    command: ./api --env prod\n    ports:\n      - 9080:8081\n    volumes:\n      - ./config:/go/api/config\n      - ./data:/go/api/data\n      - ./logs:/go/api/logs\n    depends_on:\n      db:\n        condition: service_healthy\n\n  frontend:\n    image: noah231515/receipt-wrangler-desktop:latest\n    restart: always\n    ports:\n      - 9081:80\n'})}),"\n",(0,s.jsx)(n.h2,{id:"docker-compose-monolithic",children:"Docker compose monolithic"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'services:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: wrangler\n      POSTGRES_PASSWORD: change_me\n      POSTGRES_DB: wrangler\n    volumes:\n      - ./pgsql:/var/lib/pgsql\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]\n      interval: 10s\n      timeout: 10s\n      retries: 5\n\n  wrangler:\n    image: noah231515/receipt-wrangler:latest\n    entrypoint: ./entrypoint.sh\n    restart: always\n    volumes:\n      - ./config:/app/receipt-wrangler-api/config\n      - ./data:/app/receipt-wrangler-api/data\n      - ./logs:/app/receipt-wrangler-api/logs\n    depends_on:\n      db:\n        condition: service_healthy\n    ports:\n      - 9082:80\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(96540);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);