"use strict";(self.webpackChunkreceipt_wrangler_doc=self.webpackChunkreceipt_wrangler_doc||[]).push([[97],{1191:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var o=n(4848),s=n(8453);const t={},a="postgresql",i={id:"configuration-examples/postgresql",title:"postgresql",description:"Below are some examples for a postgresql based configuration.",source:"@site/docs/configuration-examples/postgresql.md",sourceDirName:"configuration-examples",slug:"/configuration-examples/postgresql",permalink:"/docs/configuration-examples/postgresql",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"mariadb",permalink:"/docs/configuration-examples/mariadb"},next:{title:"sqlite",permalink:"/docs/configuration-examples/sqlite"}},l={},c=[{value:"Main config",id:"main-config",level:2},{value:"Docker compose microservices",id:"docker-compose-microservices",level:2},{value:"Docker compose monolithic",id:"docker-compose-monolithic",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"postgresql",children:"postgresql"}),"\n",(0,o.jsx)(r.p,{children:"Below are some examples for a postgresql based configuration."}),"\n",(0,o.jsx)(r.h2,{id:"main-config",children:"Main config"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",metastring:'title="config.prod.json"',children:'{\r\n  "secretKey": "secretKey",\r\n  "aiSettings": {\r\n    "type": "openAi",\r\n    "url": "urlToLocallyHostedLLM",\r\n    "key": "openAiKey"\r\n  },\r\n  "emailPollingInterval": 1800,\r\n  "emailSettings": [\r\n    {\r\n      "host": "emailHost",\r\n      "port": "emailPort",\r\n      "username": "emailAddress",\r\n      "password": "password/apiKey"\r\n    }\r\n  ],\r\n  "features": {\r\n    "enableLocalSignUp": true,\r\n    "aiPoweredReceipts": true\r\n  },\r\n  "database": {\r\n    "user": "wrangler",\r\n    "password": "changeMe",\r\n    "name": "wrangler",\r\n    "host": "db",\r\n    "port": 5432,\r\n    "engine": "postgresql"\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"docker-compose-microservices",children:"Docker compose microservices"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'version: "3.5"\r\nservices:\r\n  db:\r\n    image: postgres\r\n    restart: always\r\n    environment:\r\n      POSTGRES_USER: wrangler\r\n      PGUSER: wrangler\r\n      POSTGRES_PASSWORD: change_me\r\n      POSTGRES_DB: wrangler\r\n    volumes:\r\n      - ./pgsql:/var/lib/pgsql\r\n    healthcheck:\r\n      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]\r\n      interval: 10s\r\n      timeout: 10s\r\n      retries: 5\r\n\r\n  proxy:\r\n    image: noah231515/receipt-wrangler-proxy:latest\r\n    ports:\r\n      - 9082:80\r\n    depends_on:\r\n      - api\r\n      - frontend\r\n\r\n  api:\r\n    image: noah231515/receipt-wrangler-api:latest\r\n    restart: always\r\n    command: ./api --env prod\r\n    ports:\r\n      - 9080:8081\r\n    volumes:\r\n      - ./config:/go/api/config\r\n      - ./data:/go/api/data\r\n      - ./logs:/go/api/logs\r\n    depends_on:\r\n      db:\r\n        condition: service_healthy\r\n\r\n  frontend:\r\n    image: noah231515/receipt-wrangler-desktop:latest\r\n    restart: always\r\n    ports:\r\n      - 9081:80\n'})}),"\n",(0,o.jsx)(r.h2,{id:"docker-compose-monolithic",children:"Docker compose monolithic"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'services:\r\n  db:\r\n    image: postgres\r\n    restart: always\r\n    environment:\r\n      POSTGRES_USER: wrangler\r\n      POSTGRES_PASSWORD: change_me\r\n      POSTGRES_DB: wrangler\r\n    volumes:\r\n      - ./pgsql:/var/lib/pgsql\r\n    healthcheck:\r\n      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]\r\n      interval: 10s\r\n      timeout: 10s\r\n      retries: 5\r\n\r\n  wrangler:\r\n    image: noah231515/receipt-wrangler:latest\r\n    entrypoint: ./entrypoint.sh\r\n    restart: always\r\n    volumes:\r\n      - ./config:/app/receipt-wrangler-api/config\r\n      - ./data:/app/receipt-wrangler-api/data\r\n      - ./logs:/app/receipt-wrangler-api/logs\r\n    depends_on:\r\n      db:\r\n        condition: service_healthy\r\n    ports:\r\n      - 9082:80\n'})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var o=n(6540);const s={},t=o.createContext(s);function a(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);